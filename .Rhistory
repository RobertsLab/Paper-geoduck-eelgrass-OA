for (i in 1:length(Env.parameters)) {
hist(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.mean"], main = Env.parameters[[i]], xlab = "Frequency")}
# Are daily means different between Bay, Habitats within Bay?
.05/16 # P-value needs to be below 0.003125
summary(pH.mean.lm <- lm(daily.mean ~ Bay*Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "pH"),]))
anova(pH.mean.lm)
anova(pH.mean.lm)[[5]]*16
summary(DO.mean.lm <- lm(daily.mean ~ Bay*Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "DO"),]))  #yes
anova(DO.mean.lm)
anova(DO.mean.lm)[[5]]*16
summary(Temp.mean.lm <- lm(daily.mean ~ Bay* Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "Temperature"),])) #not between habitats
anova(Temp.mean.lm)
anova(Temp.mean.lm)[[5]]*16
summary(Salin.mean.lm <- lm(daily.mean ~ Bay* Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "Salinity"),]))  #yes
anova(Salin.mean.lm)
anova(Salin.mean.lm)
anova(Salin.mean.lm)[[5]]*16
# Assess normality of daily standard deviation - not normal.
par(mfrow = c(2, 2))
for (i in 1:length(Env.parameters)) {
qqnorm(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.sd"], main = Env.parameters[[i]],
xlab = "Theoretical Quantiles", ylab = "Daily Mean Parameter Value", plot.it = TRUE)
qqline(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.sd"])}
for (i in 1:length(Env.parameters)) {
hist(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.sd"], main = Env.parameters[[i]], xlab = "Frequency")}
#calculate lambda value to use to transform daily variances
par(mfrow = c(4, 3))
for (i in 1:length(Env.parameters)) {
print(Env.parameters[[i]])
transformTukey(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.sd"], plotit=TRUE, statistic = 1)
}
# Transform abundance data via its designated lambda value
sd.lambda <- c(-0.05, 0.125, 0.2, -0.275) #pulled from console print-out
for (i in 1:length(Env.parameters)) {
Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"sd.lambda"] <-Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.var"]^sd.lambda[i]
}
#convert lambda.t values to numeric
Env.Data.Master.noOuts.geo_daily$sd.lambda <- as.numeric(Env.Data.Master.noOuts.geo_daily$sd.lambda)
# Confirm normality of transformed daily std. dev
par(mfrow = c(2, 2))
for (i in 1:length(Env.parameters)) {
qqnorm(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"sd.lambda"], main = Env.parameters[[i]],
xlab = "Theoretical Quantiles", ylab = "Daily Mean Parameter Value", plot.it = TRUE)
qqline(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"sd.lambda"])}
for (i in 1:length(Env.parameters)) {
hist(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"sd.lambda"], main = Env.parameters[[i]], xlab = "Frequency")}
# Are daily sd different between Bay, Habitats within Bay?
summary(pH.sd.lm <- lm(sd.lambda ~ Bay*Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "pH"),])) #yes
anova(pH.sd.lm)
min(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "pH"),"daily.sd"])
max(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "pH"),"daily.sd"])
mean(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "pH"),"daily.sd"])
mean(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "pH"),c("daily.max", "variable")]) - mean(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "pH"),"daily.min"])
summary(DO.sd.lm <- lm(sd.lambda ~ Bay*Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "DO"),]))  #yes
anova(DO.sd.lm)
summary(T.sd.lm <- lm(sd.lambda ~ Bay*Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "Temperature"),])) #not between habitats
anova(T.sd.lm)
summary(S.sd.lm <- lm(sd.lambda ~ Bay* Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "Salinity"),]))  #yes
anova(S.sd.lm)
# Plot daily environmental parameters
group.colors <- c(WB = "sienna1", CI = "goldenrod1", PG ="steelblue2",  FB = "royalblue3")
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="pH" & (variable=="FB-E" | variable=="FB-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="royalblue3")  + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Fidalgo Bay daily mean pH") + ylim(6.84, 8.24) + xlim("0016-06-01"," 0016-07-19")
# Daily mean pH
View(Env.Data.Master.noOuts.geo_daily)
# Identify and remove outliers from pH, DO & Salinity data. Apply Tukey's method of removing outlying values, where values outside the inner fence removed:
Env.Data.Master.noOuts <- Env.Data.Master
# pH Data
for(i in 1:length(Tide.location)) { #For individual site data
IQR <- quantile(Env.Data.Master[which(Env.Data.Master$metric %in% "pH" & Env.Data.Master$variable %in% Tide.location[i]),"value"], na.rm=TRUE)[4] - quantile(Env.Data.Master[which(Env.Data.Master$metric %in% "pH" & Env.Data.Master$variable %in% Tide.location[i]),"value"], na.rm=TRUE)[2]
upperBound <- as.numeric(quantile(Env.Data.Master[which(Env.Data.Master$metric %in% "pH" & Env.Data.Master$variable %in% Tide.location[i]),"value"], na.rm=TRUE)[4] + 1.5*IQR) #calculate upper bound
lowerBound <- as.numeric(quantile(Env.Data.Master[which(Env.Data.Master$metric %in% "pH" & Env.Data.Master$variable %in% Tide.location[i]),"value"], na.rm=TRUE)[2] - 1.5*IQR) #calculate lower bound
Env.Data.Master.noOuts[which(Env.Data.Master.noOuts$metric %in% "pH" & Env.Data.Master.noOuts$variable %in% Tide.location[i] & Env.Data.Master.noOuts$value > upperBound), "value"] <- NA #replace values higher than upper bound with NA
Env.Data.Master.noOuts[which(Env.Data.Master.noOuts$metric %in% "pH" & Env.Data.Master.noOuts$variable %in% Tide.location[i] & Env.Data.Master.noOuts$value < lowerBound), "value"] <- NA #replace values lower than lower bound with NA
}
# DO Data
for(i in 1:length(Tide.location)) { #For individual site data
IQR <- quantile(Env.Data.Master[which(Env.Data.Master$metric %in% "DO" & Env.Data.Master$variable %in% Tide.location[i]),"value"], na.rm=TRUE)[4] - quantile(Env.Data.Master[which(Env.Data.Master$metric %in% "DO" & Env.Data.Master$variable %in% Tide.location[i]),"value"], na.rm=TRUE)[2]
upperBound <- as.numeric(quantile(Env.Data.Master[which(Env.Data.Master$metric %in% "DO" & Env.Data.Master$variable %in% Tide.location[i]),"value"], na.rm=TRUE)[4] + 1.5*IQR) #replace values higher than upper bound with NA
lowerBound <- 0 #DO cannot be less than 0
Env.Data.Master.noOuts[which(Env.Data.Master.noOuts$metric %in% "DO" & Env.Data.Master.noOuts$variable %in% Tide.location[i] & Env.Data.Master.noOuts$value > upperBound), "value"] <- NA
Env.Data.Master.noOuts[which(Env.Data.Master.noOuts$metric %in% "DO" & Env.Data.Master.noOuts$variable %in% Tide.location[i] & Env.Data.Master.noOuts$value < lowerBound), "value"] <- NA
}
# Salinity Data
for(i in 1:length(Tide.location)) { #For individual site data
IQR <- quantile(Env.Data.Master[which(Env.Data.Master$metric %in% "Salinity" & Env.Data.Master$variable %in% Tide.location[i]),"value"], na.rm=TRUE)[4] - quantile(Env.Data.Master[which(Env.Data.Master$metric %in% "Salinity" & Env.Data.Master$variable %in% Tide.location[i]),"value"], na.rm=TRUE)[2]
upperBound <- as.numeric(quantile(Env.Data.Master[which(Env.Data.Master$metric %in% "Salinity" & Env.Data.Master$variable %in% Tide.location[i]),"value"], na.rm=TRUE)[4] + 1.5*IQR) #calculate upper bound
lowerBound <- as.numeric(quantile(Env.Data.Master[which(Env.Data.Master$metric %in% "Salinity" & Env.Data.Master$variable %in% Tide.location[i]),"value"], na.rm=TRUE)[2] - 1.5*IQR) #calculate lower bound
Env.Data.Master.noOuts[which(Env.Data.Master.noOuts$metric %in% "Salinity" & Env.Data.Master.noOuts$variable %in% Tide.location[i] & Env.Data.Master.noOuts$value > upperBound), "value"] <- NA #replace values higher than upper bound with NA
Env.Data.Master.noOuts[which(Env.Data.Master.noOuts$metric %in% "Salinity" & Env.Data.Master.noOuts$variable %in% Tide.location[i] & Env.Data.Master.noOuts$value < lowerBound), "value"] <- NA #replace values lower than lower bound with NA
}
# Remove the NA entries
Env.Data.Master.noOuts <- Env.Data.Master.noOuts[which(!is.na(Env.Data.Master.noOuts$value)),]
# Remove SK entries
Env.Data.Master.noOuts <- subset(Env.Data.Master.noOuts, variable!="SK-E")
Env.Data.Master.noOuts <- subset(Env.Data.Master.noOuts, variable!="SK-B")
View(Env.Data.Master.noOuts)
# Geoduck were outplanted from ~June 21 -> July 22, extract only environmental data from this time span
Env.Data.Master.noOuts.geo <- Env.Data.Master.noOuts[which(Env.Data.Master.noOuts$DateTime >= "06/21/16 00:00:00"),]
View(Env.Data.Master.noOuts.geo)
pH.series.noOuts <- plot_ly(data = subset(Env.Data.Master.noOuts.geo, metric=="pH"), x = ~DateTime, y = ~value, type="scatter", mode="lines", color=~variable, hovertext=~value) %>%  #generate plotly plot
layout(title="pH across sites (outliers removed)\n2016 DNR outplant",
yaxis = list(title = 'pH (total scale)'),
legend = list(x=.95, y=.95))
Salinity.series.noOuts <- plot_ly(data = subset(Env.Data.Master.noOuts.geo, metric=="Salinity"), x = ~DateTime, y = ~value, type="scatter", mode="lines", color=~variable, hovertext=~value) %>%  #generate plotly plot
layout(title="Salinity across sites (outliers removed)\n2016 DNR outplant",
yaxis = list(title = 'Salinity'),
legend = list(x=.95, y=.95))
DO.series.noOuts <- plot_ly(data = subset(Env.Data.Master.noOuts.geo, metric=="DO"), x = ~DateTime, y = ~value, type="scatter", mode="lines", color=~variable, hovertext=~value) %>%  #generate plotly plot
layout(title="DO across sites (outliers removed)\n2016 DNR outplant",
yaxis = list(title = 'Dissolved Oxygen (mg/L)'),
legend = list(x=.95, y=.95))
Temperature.series.noOuts <- plot_ly(data = subset(Env.Data.Master.noOuts.geo, metric=="Temperature"), x = ~DateTime, y = ~value, type="scatter", mode="lines", color=~variable, hovertext=~value) %>%  #generate plotly plot
layout(title="Temperature across sites (outliers removed)\n2016 DNR outplant",
yaxis = list(title = 'Temperature (C)'),
legend = list(x=.95, y=.95))
pH.series.noOuts
Salinity.series.noOuts
DO.series.noOuts
Temperature.series.noOuts
# Pull summary statistics for each environmental variable by location
EnvSum <- set_colnames(aggregate(value ~ variable*metric + Bay + Habitat + Region, Env.Data.Master.noOuts.geo, mean), c("variable", "metric", "Bay", "Habitat", "Region", "Mean"))
head(Env.Data.Master.noOuts.geo)
Env.Data.Master.noOuts.geo <- merge(x=Env.Data.Master.noOuts.geo, y=metadata, by.x = "variable", by.y = "Sample.Shorthand", all.x=T, all.y=T)
head(Env.Data.Master.noOuts.geo)
# convert to date/time and retain as a new field
Env.Data.Master.noOuts.geo$DateTime <- as.POSIXct(strptime(Env.Data.Master.noOuts.geo$DateTime, format="%m/%d/%Y %H:%M:%S", tz=Sys.timezone())) # date in the format: YearMonthDay Hour:Minute
# use dplyr and mutate to add a day column to your data
Env.Data.Master.noOuts.geo_daily <- Env.Data.Master.noOuts.geo %>%
mutate(Day = as.Date(DateTime, format = "%Y-%m-%d"))
head(Env.Data.Master.noOuts.geo_daily)
# Calculate daily mean environmental parameters, excluding tidal heigh
Env.Data.Master.noOuts.geo_daily <- as.data.frame(subset(Env.Data.Master.noOuts.geo, !((metric=="Tide")))  %>%
mutate(Day = as.Date(DateTime, format = "%Y-%m-%d")) %>%
group_by(Day, variable, metric, Bay, Habitat, Region) %>% # group by the day column
summarise(daily.mean=mean(value), daily.sd=sd(value), daily.var=var(value), daily.min=min(value), daily.max=max(value)) %>%
na.omit())
head(Env.Data.Master.noOuts.geo_daily)
# Pull summary statistics for each environmental variable by location
EnvSum <- set_colnames(aggregate(value ~ variable*metric + Bay + Habitat + Region, Env.Data.Master.noOuts.geo, mean), c("variable", "metric", "Bay", "Habitat", "Region", "Mean"))
EnvSum$Median <- aggregate(value ~ variable*metric + Bay + Habitat + Region, Env.Data.Master.noOuts.geo, median)$value
EnvSum$sd <- aggregate(value ~ variable*metric + Bay + Habitat + Region, Env.Data.Master.noOuts.geo, sd)$value
EnvSum$Var <- aggregate(value ~ variable*metric + Bay + Habitat + Region, Env.Data.Master.noOuts.geo, var)$value
EnvSum$Min <- aggregate(value ~ variable*metric + Bay + Habitat + Region, Env.Data.Master.noOuts.geo, min)$value
EnvSum$Max <- aggregate(value ~ variable*metric + Bay + Habitat + Region, Env.Data.Master.noOuts.geo, max)$value
View(EnvSum)
# Grand mean, sd, variance values
aggregate(value ~ metric, Env.Data.Master.noOuts.geo, max)
aggregate(value ~ metric + Habitat , Env.Data.Master.noOuts.geo, mean)
aggregate(value ~ metric + Habitat , Env.Data.Master.noOuts.geo, var)
aggregate(value ~ metric, Env.Data.Master.noOuts.geo, var)
View(aggregate(value ~ metric + variable , Env.Data.Master.noOuts.geo, mean))
View(aggregate(value ~ metric + variable , Env.Data.Master.noOuts.geo, sd))
# Correlation plots between summary stats within enviromental parameters
pairs(EnvSum[6:11]) # Independent parameters to use: Mean, Var
head(Env.Data.Master.noOuts.geo)
View(Env.Data.Master.noOuts.geo)
# Assess normality of daily means - pretty good
par(mfrow = c(2, 2))
for (i in 1:length(Env.parameters)) {
qqnorm(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.mean"], main = Env.parameters[[i]],
xlab = "Theoretical Quantiles", ylab = "Daily Mean Parameter Value", plot.it = TRUE)
qqline(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.mean"])}
for (i in 1:length(Env.parameters)) {
hist(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.mean"], main = Env.parameters[[i]], xlab = "Frequency")}
# Are daily means different between Bay, Habitats within Bay?
.05/16 # P-value needs to be below 0.003125
summary(pH.mean.lm <- lm(daily.mean ~ Bay*Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "pH"),]))
anova(pH.mean.lm)
summary(DO.mean.lm <- lm(daily.mean ~ Bay*Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "DO"),]))  #yes
anova(DO.mean.lm)
summary(Temp.mean.lm <- lm(daily.mean ~ Bay* Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "Temperature"),])) #not between habitats
anova(Temp.mean.lm)
summary(Salin.mean.lm <- lm(daily.mean ~ Bay* Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "Salinity"),]))  #yes
anova(Salin.mean.lm)
anova(Salin.mean.lm)[[5]]*16
# Assess normality of daily standard deviation - not normal.
par(mfrow = c(2, 2))
for (i in 1:length(Env.parameters)) {
qqnorm(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.sd"], main = Env.parameters[[i]],
xlab = "Theoretical Quantiles", ylab = "Daily Mean Parameter Value", plot.it = TRUE)
qqline(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.sd"])}
for (i in 1:length(Env.parameters)) {
hist(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.sd"], main = Env.parameters[[i]], xlab = "Frequency")}
#calculate lambda value to use to transform daily variances
par(mfrow = c(4, 3))
for (i in 1:length(Env.parameters)) {
print(Env.parameters[[i]])
transformTukey(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.sd"], plotit=TRUE, statistic = 1)
}
#Create new column in dataframe with lambda-transformed area data
Env.Data.Master.noOuts.geo_daily$sd.lambda <- c(rep("x", times=nrow(Env.Data.Master.noOuts.geo_daily)))
# Transform abundance data via its designated lambda value
sd.lambda <- c(0.175, 0.225, 0.875, -0.225) #pulled from console print-out
for (i in 1:length(Env.parameters)) {
Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"sd.lambda"] <-Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"daily.var"]^sd.lambda[i]
}
#convert lambda.t values to numeric
Env.Data.Master.noOuts.geo_daily$sd.lambda <- as.numeric(Env.Data.Master.noOuts.geo_daily$sd.lambda)
# Confirm normality of transformed daily std. dev
par(mfrow = c(2, 2))
for (i in 1:length(Env.parameters)) {
qqnorm(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"sd.lambda"], main = Env.parameters[[i]],
xlab = "Theoretical Quantiles", ylab = "Daily Mean Parameter Value", plot.it = TRUE)
qqline(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"sd.lambda"])}
for (i in 1:length(Env.parameters)) {
hist(Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% Env.parameters[i]),"sd.lambda"], main = Env.parameters[[i]], xlab = "Frequency")}
# Are daily sd different between Bay, Habitats within Bay?
summary(pH.sd.lm <- lm(sd.lambda ~ Bay*Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "pH"),])) #yes
anova(pH.sd.lm)
summary(DO.sd.lm <- lm(sd.lambda ~ Bay*Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "DO"),]))  #yes
anova(DO.sd.lm)
anova(DO.sd.lm)[[5]]*16
summary(T.sd.lm <- lm(sd.lambda ~ Bay*Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "Temperature"),])) #not between habitats
anova(T.sd.lm)
summary(S.sd.lm <- lm(sd.lambda ~ Bay* Habitat, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "Salinity"),]))  #yes
anova(S.sd.lm)
# Plot daily environmental parameters
group.colors <- c(WB = "sienna1", CI = "goldenrod1", PG ="steelblue2",  FB = "royalblue3")
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="pH" & (variable=="FB-E" | variable=="FB-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="royalblue3")  + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Fidalgo Bay daily mean pH") + ylim(6.84, 8.24) + xlim("0016-06-01"," 0016-07-19")
# Daily mean pH
View(Env.Data.Master.noOuts.geo_daily)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="pH" & (variable=="PG-E" | variable=="PG-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="steelblue2")  + scale_linetype_manual(values=c("solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Port Gamble Bay daily mean pH") + ylim(6.84, 8.24) + xlim("0016-06-01"," 0016-07-19")
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="pH" & (variable=="CI-E" | variable=="CI-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="goldenrod1")   + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Case Inlet daily mean pH") + ylim(6.84, 8.24) + xlim("0016-06-01"," 0016-07-19")
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="pH" & (variable=="WB-E" | variable=="WB-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="sienna1")   + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank()) + ggtitle("Willapa Bay daily mean pH") + ylim(6.84, 8.24) + xlim("0016-06-01"," 0016-07-19")
dev.off()
# Daily mean pH
png("results/Environmental/pH-FB-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="pH" & (variable=="FB-E" | variable=="FB-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="royalblue3")  + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Fidalgo Bay daily mean pH") + ylim(6.84, 8.24) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/pH-PG-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="pH" & (variable=="PG-E" | variable=="PG-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="steelblue2")  + scale_linetype_manual(values=c("solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Port Gamble Bay daily mean pH") + ylim(6.84, 8.24) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/pH-CI-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="pH" & (variable=="CI-E" | variable=="CI-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="goldenrod1")   + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Case Inlet daily mean pH") + ylim(6.84, 8.24) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/pH-WB-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="pH" & (variable=="WB-E" | variable=="WB-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="sienna1")   + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank()) + ggtitle("Willapa Bay daily mean pH") + ylim(6.84, 8.24) + xlim("0016-06-01"," 0016-07-19")
dev.off()
# Daily mean DO
png("results/Environmental/DO-FB-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="DO" & (variable=="FB-E" | variable=="FB-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="royalblue3") + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank()) + ggtitle("Fidalgo Bay daily mean DO")  + ylim(0, 21) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/DO-PG-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="DO" & (variable=="PG-E" | variable=="PG-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="steelblue2")  + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Port Gamble Bay daily mean DO") + ylim(0, 21) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/DO-CI-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="DO" & (variable=="CI-E" | variable=="CI-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="goldenrod1")   + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Case Inlet daily mean DO") + ylim(0, 21) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/DO-WB-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="DO" & (variable=="WB-E" | variable=="WB-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="sienna1")  + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank()) + ggtitle("Willapa Bay daily mean DO") + ylim(0, 21) + xlim("0016-06-01"," 0016-07-19")
dev.off()
# Daily Mean Temperature
png("results/Environmental/Temp-FB-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="Temperature" & (variable=="FB-E" | variable=="FB-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="royalblue3") + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank()) + ggtitle("Fidalgo Bay Temperature")  + ylim(10, 25) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/Temp-PG-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="Temperature" & (variable=="PG-E" | variable=="PG-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="steelblue2")  + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Port Gamble Bay Temperature") + ylim(10, 25) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/Temp-CI-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="Temperature" & (variable=="CI-E" | variable=="CI-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="goldenrod1")   + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Case Inlet Temperature") + ylim(10, 25) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/Temp-WB-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="Temperature" & (variable=="WB-E" | variable=="WB-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="sienna1")  + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank()) + ggtitle("Willapa Bay Temperature") + ylim(10, 25) + xlim("0016-06-01"," 0016-07-19")
dev.off()
# Daily Mean Salinity
png("results/Environmental/Salinity-FB-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="Salinity" & (variable=="FB-E" | variable=="FB-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="royalblue3") + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank()) + ggtitle("Fidalgo Bay Salinity")  + ylim(25, 45) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/Salinity-PG-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="Salinity" & (variable=="PG-E" | variable=="PG-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="steelblue2")  + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Port Gamble Bay Salinity") + ylim(25, 45) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/Salinity-CI-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="Salinity" & (variable=="CI-E" | variable=="CI-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="goldenrod1")   + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Case Inlet Salinity") + ylim(25, 45) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/Salinity-WB-daily-mean.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="Salinity" & (variable=="WB-E" | variable=="WB-B"))), aes(x=Day,y=daily.mean,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="sienna1")  + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.mean + daily.sd, ymin=daily.mean-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank()) + ggtitle("Willapa Bay Salinity") + ylim(25, 45) + xlim("0016-06-01"," 0016-07-19")
dev.off()
# Daily DO Standard Deviation
png("results/Environmental/DO-FB-daily-sd.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="DO" & (variable=="FB-E" | variable=="FB-B"))), aes(x=Day,y=daily.sd,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="royalblue3") + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.sd + daily.sd, ymin=daily.sd-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank()) + ggtitle("Fidalgo Bay DO daily SD")  + ylim(0, 15.5) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/DO-PG-daily-sd.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="DO" & (variable=="PG-E" | variable=="PG-B"))), aes(x=Day,y=daily.sd,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="steelblue2")  + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.sd + daily.sd, ymin=daily.sd-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Port Gamble Bay DO daily SD") + ylim(0, 15.5) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/DO-CI-daily-sd.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="DO" & (variable=="CI-E" | variable=="CI-B"))), aes(x=Day,y=daily.sd,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="goldenrod1")   + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.sd + daily.sd, ymin=daily.sd-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank())  + ggtitle("Case Inlet DO daily SD") + ylim(0, 15.5) + xlim("0016-06-01"," 0016-07-19")
dev.off()
png("results/Environmental/DO-WB-daily-sd.png", width=700, height=700)
ggplot(data=subset(Env.Data.Master.noOuts.geo_daily, (metric=="DO" & (variable=="WB-E" | variable=="WB-B"))), aes(x=Day,y=daily.sd,colour=variable,group=variable)) + geom_line(size=2, aes(linetype=variable), color="sienna1")  + scale_linetype_manual(values=c("dashed", "solid")) + geom_ribbon(aes(ymax=daily.sd + daily.sd, ymin=daily.sd-daily.sd, alpha=0.5), colour=NA, fill = "grey70") + theme_light() + theme(plot.title = element_text(size=24, face="bold"), axis.text.y=element_text(size=18, angle=45, face="bold"), axis.text.x=element_text(size=18, face="bold"), axis.title=element_blank(), legend.position = "none", panel.background = element_blank()) + ggtitle("Willapa Bay DO daily SD") + ylim(0, 15.5) + xlim("0016-06-01"," 0016-07-19")
dev.off()
Env.Data.Master.noOuts.geo_daily$variable<-relevel(Env.Data.Master.noOuts.geo_daily$variable, ref = "PG-B") #change "ref" bay for new comparisons
# Mean pH
summary(lm(daily.mean ~ variable, data=Env.Data.Master.noOuts.geo_daily[which(Env.Data.Master.noOuts.geo_daily$metric %in% "pH"),]))
# Merge protein data with environmental summary stats
Master.temp <- data.frame(merge(x=data.melted.plus.pepsum.wide[c("Protein", "Sample", "Sample.Shorthand", "Pep1", "Pep2", "Pep3")], y=EnvSum, by.x = "Sample.Shorthand", by.y = "variable", all.x=TRUE, all.y=TRUE), stringsAsFactors = FALSE)
Master.SRM <- data.frame(merge(x=Growth[c("PRVial", "FShell", "AvgIShell", "Growth")], y=Master.temp, by.x="PRVial", by.y="Sample", all.x=T, all.y=T))
# Reformat dataframe
Master.SRM[Master.SRM == "NaN"] <- NA #Replace NaN strings with official "NA" designation
Master.SRM$Region <- as.factor(Master.SRM$Region) #convert environmental stats to numeric
levels(Master.SRM$Protein) <- c(levels(Master.SRM$Protein), "NaK-ATPase") #Replace protein name to remove slash
Master.SRM$Protein[Master.SRM$Protein == 'Sodium/potassium-transporting'] <- 'NaK-ATPase'
Protein.names.corr <- levels(Master.SRM$Protein)
Protein.names.corr <- Protein.names.corr[-11]
write.csv(file="results/SRM/Master-Data-Joined.csv", Master.SRM)
# Investigating correlation between growth, peptide abundance
# Note: Pep1 is the most abundant (within a protein), followed by Pep2, then Pep3
plot(Master.SRM[c("Growth", "Pep1", "Pep2", "Pep3")]) # It looks like protein abundance increased with growth
# Confirmed more interactive plot.
plot_ly(data=Master.SRM, y=~Pep1, x=~Growth, type="scatter", color=~Protein) %>%
layout(title="Peptide against Growth",
yaxis = list(title = 'Protein Abundance'),
legend = list(x=.85, y=.95))
# Correlation test by protein
grow.Pep1.cor <- data.frame(matrix(ncol=4, nrow=0))
colnames(grow.Pep1.cor) <- c("Protein", "Estimate", "Statistic", "P-Value")
# Calculate correlation coefficien and plot peptides against growth for each protein
for (i in 1:length(Protein.names.corr)) {
temp1 <- cor.test(~Growth + Pep1, data=Master.SRM[grepl(Protein.names.corr[[i]], Master.SRM$Protein),])
grow.Pep1.cor[i,"Protein"] <- Protein.names.corr[[i]]
grow.Pep1.cor[i,"Estimate"] <- temp1$estimate
grow.Pep1.cor[i,"Statistic"] <- temp1$statistic
grow.Pep1.cor[i,"P-Value"] <- temp1$p.value
}
write.csv(file="results/SRM/Grow-Abun-Cor-test.csv", grow.Pep1.cor)
grow.Pep1.cor$P.corr <- (grow.Pep1.cor$`P-Value`)*13
# Generate correlation plots between growth & Peptide 1 abundance (most abundant/detected peptide in all proteins)
for (i in 1:length(Protein.names.corr)) {
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-Grow-Corrplot.png", sep=""), width=700, height=700)
plot(Master.SRM[grepl(Protein.names.corr[[i]], Master.SRM$Protein),][c("Growth", "Pep1")], main=paste(Protein.names.corr[[i]], "\nPeptide Abundance ~ Growth", sep=""), ylab="Peptide 1 Abundance", xlab="Relative Growth (mm)")
dev.off()
}
temp2 <- data.frame(matrix(ncol=5, nrow=0))
colnames(temp2) <- c("Env-Metric", "Env-Stat", "Estimate", "Statistic", "P-Value")
temp4 <- data.frame(matrix(ncol=5, nrow=0))
colnames(temp4) <- c("Env-Metric", "Env-Stat", "Estimate", "Statistic", "P-Value")
# Calculate correlation coefficient and plot peptides against growth for each protein
for (i in 1:length(Env.parameters)) {
temp1 <- cor.test(~Growth + Mean, data=Master.SRM[grepl(Env.parameters[[i]], Master.SRM$metric),])
temp2[i,"Env-Metric"] <- Env.parameters[[i]]
temp2[i,"Env-Stat"] <- "Mean"
temp2[i,"Estimate"] <- temp1$estimate
temp2[i,"Statistic"] <- temp1$statistic
temp2[i,"P-Value"] <- temp1$p.value
temp3 <- cor.test(~Growth + sd, data=Master.SRM[grepl(Env.parameters[[i]], Master.SRM$metric),])
temp4[i,"Env-Metric"] <- Env.parameters[[i]]
temp4[i,"Env-Stat"] <- "SD"
temp4[i,"Estimate"] <- temp3$estimate
temp4[i,"Statistic"] <- temp3$statistic
temp4[i,"P-Value"] <- temp3$p.value
}
grow.env.cor <- rbind(temp2, temp4)
write.csv(file="results/Environmental/Grow-Env-Cor-test.csv", grow.env.cor)
grow.env.cor$p.adj <- (grow.env.cor$`P-Value`)*8
View(grow.env.cor)
# Generate correlation plots between relative growth mean pH, DO, Temp, Salinity
for (i in 1:length(Env.parameters)) {
png(paste("results/Correlation-plots/", Env.parameters[[i]], "-Grow-Corrplot.png", sep=""), width=700, height=700)
plot(Master.SRM[grepl(Env.parameters[[i]], Master.SRM$metric),][c("Mean", "Growth")], main=paste("Growth ~ Mean ", Env.parameters[[i]], sep=""), ylab="Relative Growth (mm)", xlab=paste("Mean ", Env.parameters[[i]], sep=""))
dev.off()
}
# Generate correlation plots between relative growth & pH, DO, Temp, Salinity
for (i in 1:length(Env.parameters)) {
png(paste("results/Correlation-plots/", Env.parameters[[i]], "-Grow-Corrplot.png", sep=""), width=700, height=700)
plot(Master.SRM[grepl(Env.parameters[[i]], Master.SRM$metric),][c("Growth", "SD")], main=paste("Growth ~ ", Env.parameters[[i]], " SD", sep=""), ylab="Relative Growth (mm)", xlab=paste(Env.parameters[[i]], " SD", sep=""))
dev.off()
}
temp2 <- data.frame(matrix(ncol=6, nrow=0))
colnames(temp2) <- c("Protein", "Env-Paramter", "Env-Metric", "Estimate", "Statistic", "P-Value")
temp4 <- data.frame(matrix(ncol=6, nrow=0))
colnames(temp4) <- c("Protein", "Env-Paramter", "Env-Metric", "Estimate", "Statistic", "P-Value")
# Calculate correlation coefficien and plot peptides against growth for each protein
for (j in 1:length(Env.parameters)) {
for (i in 1:length(Protein.names.corr)) {
temp1 <- cor.test(~Pep1 + Mean, data=subset(Master.SRM, (metric==Env.parameters[[j]] & Protein==Protein.names.corr[[i]])))
temp2[i+13*j,"Protein"] <- Protein.names.corr[[i]]
temp2[i+13*j,"Env-Paramter"] <- Env.parameters[[j]]
temp2[i+13*j,"Env-Metric"] <- "Mean"
temp2[i+13*j,"Estimate"] <- temp1$estimate
temp2[i+13*j,"Statistic"] <- temp1$statistic
temp2[i+13*j,"P-Value"] <- temp1$p.value
}
}
for (j in 1:length(Env.parameters)) {
for (i in 1:length(Protein.names.corr)) {
temp3 <- cor.test(~Pep1 + sd, data=subset(Master.SRM, (metric==Env.parameters[[j]] & Protein==Protein.names.corr[[i]])))
temp4[i+13*j,"Protein"] <- Protein.names.corr[[i]]
temp4[i+13*j,"Env-Paramter"] <- Env.parameters[[j]]
temp4[i+13*j,"Env-Metric"] <- "SD"
temp4[i+13*j,"Estimate"] <- temp3$estimate
temp4[i+13*j,"Statistic"] <- temp3$statistic
temp4[i+13*j,"P-Value"] <- temp3$p.value
}
}
env.pep1.cor <- rbind(temp2, temp4)
env.pep1.cor$P.adj <- (env.pep1.cor$`P-Value`)*4
View(env.pep1.cor[-5:-6])
write.csv(file="results/SRM/Pep-Env-Cor-test.csv", env.pep1.cor)
# Generate correlation plots between Mean Environmental Parameters and  Peptide 1 abundance (most abundant/detected peptide in all proteins)
# Mean pH
for (i in 1:length(Protein.names.corr)) {
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-Mean-pH-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="pH"))[c("Mean", "Pep1")], main=paste(Protein.names.corr[[i]], " Peptide Abundance ~ ", "\nMean pH", sep=""), ylab="Peptide 1 Abundance", xlab="Mean pH")
dev.off()
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-pH SD-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="pH"))[c("SD", "Pep1")], main=paste(Protein.names.corr[[i]], " Abundance ~ ", "\npH SD", sep=""), ylab="Peptide 1 Abundance", xlab="Mean pH")
dev.off()
}
Protein.names.corr
# Generate correlation plots between Mean Environmental Parameters and  Peptide 1 abundance (most abundant/detected peptide in all proteins)
# Mean pH
for (i in 1:length(Protein.names.corr)) {
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-Mean-pH-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="pH"))[c("Mean", "Pep1")], main=paste(Protein.names.corr[[i]], " Peptide Abundance ~ ", "\nMean pH", sep=""), ylab="Peptide 1 Abundance", xlab="Mean pH")
dev.off()
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-pH SD-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="pH"))[c("SD", "Pep1")], main=paste(Protein.names.corr[[i]], " Abundance ~ ", "\npH SD", sep=""), ylab="Peptide 1 Abundance", xlab="Mean pH")
dev.off()
}
head(Master.SRM)
subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="pH"))[c("Mean", "Pep1")]
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="pH"))[c("Mean", "Pep1")], main=paste(Protein.names.corr[[i]], " Peptide Abundance ~ ", "\nMean pH", sep=""), ylab="Peptide 1 Abundance", xlab="Mean pH")
dev.off()
dev.off()
dev.off()
Protein.names.corr
unique(Master.SRM$Protein)
levels(Master.SRM$Protein)
Protein.names.corr
levels(Master.SRM$Protein)
Master.temp <- data.frame(merge(x=data.melted.plus.pepsum.wide[c("Protein", "Sample", "Sample.Shorthand", "Pep1", "Pep2", "Pep3")], y=EnvSum, by.x = "Sample.Shorthand", by.y = "variable", all.x=TRUE, all.y=TRUE), stringsAsFactors = FALSE)
Master.SRM <- data.frame(merge(x=Growth[c("PRVial", "FShell", "AvgIShell", "Growth")], y=Master.temp, by.x="PRVial", by.y="Sample", all.x=T, all.y=T))
# Reformat dataframe
Master.SRM[Master.SRM == "NaN"] <- NA #Replace NaN strings with official "NA" designation
Master.SRM$Region <- as.factor(Master.SRM$Region) #convert environmental stats to numeric
levels(Master.SRM$Protein) <- c(levels(Master.SRM$Protein), "NaK-ATPase") #Replace protein name to remove slash
Master.SRM$Protein[Master.SRM$Protein == 'Sodium/potassium-transporting'] <- 'NaK-ATPase'
Protein.names.corr <- levels(Master.SRM$Protein)
Protein.names.corr <- Protein.names.corr[-11]
levels(Master.SRM$Protein)
Protein.names.corr
levels(Master.SRM$Protein)[11]
levels(Master.SRM$Protein)[-11]
levels(Master.SRM$Protein) <- levels(Master.SRM$Protein)[-11]
Master.SRM[which(Master.SRM$Protein == "Sodium/potassium-transporting")]
# Merge protein data with environmental summary stats
Master.temp <- data.frame(merge(x=data.melted.plus.pepsum.wide[c("Protein", "Sample", "Sample.Shorthand", "Pep1", "Pep2", "Pep3")], y=EnvSum, by.x = "Sample.Shorthand", by.y = "variable", all.x=TRUE, all.y=TRUE), stringsAsFactors = FALSE)
Master.SRM <- data.frame(merge(x=Growth[c("PRVial", "FShell", "AvgIShell", "Growth")], y=Master.temp, by.x="PRVial", by.y="Sample", all.x=T, all.y=T))
# Reformat dataframe
Master.SRM[Master.SRM == "NaN"] <- NA #Replace NaN strings with official "NA" designation
Master.SRM$Region <- as.factor(Master.SRM$Region) #convert environmental stats to numeric
levels(Master.SRM$Protein) <- c(levels(Master.SRM$Protein), "NaK-ATPase") #Replace protein name to remove slash
Master.SRM$Protein[Master.SRM$Protein == 'Sodium/potassium-transporting'] <- 'NaK-ATPase'
Protein.names.corr <- levels(Master.SRM$Protein)
Protein.names.corr <- Protein.names.corr[-11]
write.csv(file="results/SRM/Master-Data-Joined.csv", Master.SRM)
Protein.names.corr
View(Master.SRM)
# Generate correlation plots between Mean Environmental Parameters and  Peptide 1 abundance (most abundant/detected peptide in all proteins)
# Mean pH
for (i in 1:length(Protein.names.corr)) {
png(paste("results/Correlation-plots/", Protein.names.corr[[1]], "-Mean-pH-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[1]] & metric=="pH"))[c("Mean", "Pep1")], main=paste(Protein.names.corr[[1]], " Peptide Abundance ~ ", "\nMean pH", sep=""), ylab="Peptide 1 Abundance", xlab="Mean pH")
dev.off()
png(paste("results/Correlation-plots/", Protein.names.corr[[1]], "-pH SD-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[1]] & metric=="pH"))[c("SD", "Pep1")], main=paste(Protein.names.corr[[1]], " Abundance ~ ", "\npH SD", sep=""), ylab="Peptide 1 Abundance", xlab="Mean pH")
dev.off()
}
head(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="pH"))[c("Mean", "Pep1")])
head(subset(Master.SRM, (Protein==Protein.names.corr[[1]] & metric=="pH"))[c("Mean", "Pep1")])
head(subset(Master.SRM, (Protein==Protein.names.corr[[11]] & metric=="pH"))[c("Mean", "Pep1")])
head(subset(Master.SRM, (Protein==Protein.names.corr[[12]] & metric=="pH"))[c("Mean", "Pep1")])
head(subset(Master.SRM, (Protein==Protein.names.corr[[13]] & metric=="pH"))[c("Mean", "Pep1")])
head(subset(Master.SRM, (Protein==Protein.names.corr[[14]] & metric=="pH"))[c("Mean", "Pep1")])
head(subset(Master.SRM, (Protein==Protein.names.corr[[2]] & metric=="pH"))[c("SD", "Pep1")])
head(subset(Master.SRM, (Protein==Protein.names.corr[[2]] & metric=="pH"))[c("sd", "Pep1")])
# Generate correlation plots between Mean Environmental Parameters and  Peptide 1 abundance (most abundant/detected peptide in all proteins)
# Mean pH
for (i in 1:length(Protein.names.corr)) {
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-Mean-pH-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="pH"))[c("Mean", "Pep1")], main=paste(Protein.names.corr[[i]], " Peptide Abundance ~ ", "\nMean pH", sep=""), ylab="Peptide 1 Abundance", xlab="Mean pH")
dev.off()
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-pH SD-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="pH"))[c("sd", "Pep1")], main=paste(Protein.names.corr[[i]], " Abundance ~ ", "\npH SD", sep=""), ylab="Peptide 1 Abundance", xlab="Mean pH")
dev.off()
}
# DO
for (i in 1:length(Protein.names.corr)) {
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-Mean-DO-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="DO"))[c("Mean", "Pep1")], main=paste(Protein.names.corr[[i]], " Peptide Abundance ~ ", "\nMean DO", sep=""), ylab="Peptide 1 Abundance", xlab="Mean DO")
dev.off()
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-DO SD-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="DO"))[c("sd", "Pep1")], main=paste(Protein.names.corr[[i]], " Abundance ~ ", "\nDO SD", sep=""), ylab="Peptide 1 Abundance", xlab="Mean DO")
dev.off()
}
#Temperature
for (i in 1:length(Protein.names.corr)) {
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-Mean-Temperature-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="Temperature"))[c("Mean", "Pep1")], main=paste(Protein.names.corr[[i]], " Peptide Abundance ~ ", "\nMean Temperature", sep=""), ylab="Peptide 1 Abundance", xlab="Mean Temperature")
dev.off()
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-Temperature SD-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="Temperature"))[c("sd", "Pep1")], main=paste(Protein.names.corr[[i]], " Abundance ~ ", "\nTemperature SD", sep=""), ylab="Peptide 1 Abundance", xlab="Mean Temperature")
dev.off()
}
#Salinity
for (i in 1:length(Protein.names.corr)) {
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-Mean-Salinity-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="Salinity"))[c("Mean", "Pep1")], main=paste(Protein.names.corr[[i]], " Peptide Abundance ~ ", "\nMean Salinity", sep=""), ylab="Peptide 1 Abundance", xlab="Mean Salinity")
dev.off()
png(paste("results/Correlation-plots/", Protein.names.corr[[i]], "-Salinity SD-Corrplot.png", sep=""), width=700, height=500)
plot(subset(Master.SRM, (Protein==Protein.names.corr[[i]] & metric=="Salinity"))[c("sd", "Pep1")], main=paste(Protein.names.corr[[i]], " Abundance ~ ", "\nSalinity SD", sep=""), ylab="Peptide 1 Abundance", xlab="Mean Salinity")
dev.off()
}
